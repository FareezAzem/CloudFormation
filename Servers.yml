Description: >
    Fareez / 2021
Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    MyAMI:
        Description: An Amazom Machine Image ID.
        Type: String
    InstanceType:
        Description: The server type.
        Type: String
    HealthyThreshold:
        Description: The number of consecutive health checks successes required before considering an unhealthy target healthy.
        Type: String
    UnHealthyThreshold:
        Description: The number of consecutive health check failures required before considering a target unhealthy.
        Type: String
    HealthCheckIntervalSecs:
        Description: The approximate amount of time, in seconds, between health checks of an individual target.
        Type: String
    HealthCheckTimeoutSecs:
        Description: The amount of time, in seconds, during which no response from a target means a failed health check.
        Type: String
    LBSecIngressCidr:
        Description: Please enter the IP range (CIDR notation) for the LB inbound requests.
        Type: String
    LBSecEgressCidr:
        Description: Please enter the IP range (CIDR notation) for the LB outbound requests.
        Type: String
    websSecEgressCidr:
        Description: Please enter the IP range (CIDR notation) for the web server outbound requests
        Type: String
    websSecIngressCidr:
        Description: Please enter the IP range (CIDR notation) for the web server inbound requests.
        Type: String
Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref LBSecIngressCidr
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref LBSecEgressCidr
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref websSecIngressCidr
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref websSecIngressCidr
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: !Ref websSecIngressCidr
  S3IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
  BucketPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 's3:Get*'
              - 's3:List*'
            Effect: Allow
            Resource: "*"
      PolicyName: BucketPolicy
      Roles:
        - !Ref S3IAMRole
  InstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - !Ref "S3IAMRole"
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install docker
          sudo su
          apt-get update
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          add-apt-repository \
          "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) \
          stable"
          apt-get update
          apt-get install -y docker-ce
          usermod -aG docker ubuntu
          sudo docker run -dit --name tecmint-web -p 80:80 -v /home/user/website/:/usr/local/apache2/htdocs/ httpd:2.4
          cd /home/user/website/
          sudo apt install awscli -y
          aws s3 cp s3://projectnum2/index.html .
      ImageId: !Ref MyAMI
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - !Ref WebServerSecGroup
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: '15'
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '6'
      TargetGroupARNs: 
        - !Ref WebAppTargetGroup
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups: 
        - !Ref LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: !Ref HealthCheckIntervalSecs
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: !Ref HealthCheckTimeoutSecs
      HealthyThresholdCount: !Ref HealthyThreshold
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: !Ref UnHealthyThreshold
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
Outputs:
  MYELB:
    Description: The URL for the created ELB.
    Value: 
      !Sub
      - http://${Domain}
      - { Domain: !GetAtt WebAppLB.DNSName }
    Export:
      Name: !Sub ${EnvironmentName}-WebAppLB